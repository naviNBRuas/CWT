name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*' # Run release job on version tags
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero to treat all errors as warnings. The GitHub editor is 1-indexed for columns too
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Run unit tests
      run: |
        pytest tests/

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test # Only build Docker if tests pass

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t cwt-tool:latest .

  build-multiarch-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') # Only push multi-arch images on tag push

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push multi-arch Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: your_docker_username/cwt-tool:latest

  build-executables:
    runs-on: ${{ matrix.os }}
    needs: build-and-test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build executable
      run: |
        pyinstaller cwt.spec

    - name: Upload executable artifact (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: cwt-linux
        path: dist/cwt

    - name: Upload executable artifact (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: cwt-windows
        path: dist/cwt.exe

    - name: Upload executable artifact (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: cwt-macos
        path: dist/cwt

  release:
    runs-on: ubuntu-latest
    needs: [build-executables, build-multiarch-docker-image] # Depends on executables and multi-arch Docker image
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # Download artifacts to a directory named 'artifacts'

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/cwt-linux/cwt
        asset_name: cwt-linux
        asset_content_type: application/octet-stream

    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/cwt-windows/cwt.exe
        asset_name: cwt-windows.exe
        asset_content_type: application/octet-stream

    - name: Upload Release Asset (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/cwt-macos/cwt
        asset_name: cwt-macos
        asset_content_type: application/octet-stream